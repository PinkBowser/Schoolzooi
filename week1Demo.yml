
#    A VPC (already provided in template);
#    A public subnet (already provided in template);
#    An internet gateway;
#    A route table;
#    A security group;
#    An EC2 instance.
# A description of what your template does.
Description: My first VPC (10.0.0.0/16) with a public subnet (10.0.10.0/24).
# Parameters you can set in CloudFormation when you roll out your stack.
Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC.
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
    Default: 10.0.10.0/24
# The cloud resources your template is going to create.

Resources:
  lucasVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags: # Good practice is to add tags!
        - Key: Name
          Value: lucasVPC

  lucasSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: yes # Important! See documentation.
      VpcId: !Ref lucasVPC
      Tags:
        - Key: Name
          Value: lucasSubnet

  lucasIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: leuke name

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref lucasVPC
      InternetGatewayId: !Ref lucasIGW

  lucasRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref lucasVPC
      Tags:
        - Key: Name
          Value: leuke name1

  LucasSubnetRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref lucasSubnet
      RouteTableId: !Ref lucasRT

  LucasRoute:
    Type: AWS::EC2::Route
    DependsOn: lucasIGW
    Properties:
       RouteTableId: !Ref lucasRT
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref lucasIGW

  LucasSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref lucasVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  ec2Instance: 
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          VolumeType: gp2
          VolumeSize: 10
          Encrypted: "true"
      InstanceType: t2.micro
      ImageId: ami-082b1f4237bd816a1
      KeyName: vockey
      SecurityGroupIds: 
        - !Ref LucasSecurityGroup
      SubnetId: !Ref lucasSubnet
      Tags:
        - Key: Name
          Value: testLucas
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            apt update -y
            apt install nginx -y
Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Sub 'http://${ec2Instance.PublicDnsName}'